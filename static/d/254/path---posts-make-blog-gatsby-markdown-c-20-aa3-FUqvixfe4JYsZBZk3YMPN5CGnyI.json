{"data":{"markdownRemark":{"html":"<h1>Gatsby 로 Markdown 블로그 만들기</h1>\n<p>Gatsby가 Markdown 파일을 읽어서 정적파일로 만드는 방법은 아래 순서대로 이루어진다.</p>\n<ol>\n<li><code>gatsby-source-filesystem</code> 로 파일을 읽는다.</li>\n<li><code>gatsby-transformer-remark</code>로 마크다운 파일을 해석한다.</li>\n<li>template 에서 frontmatter으로 data 를 세팅한다.</li>\n<li>Gatsby의 nodejs createPageAPI를 사용하여 정적 페이지 만들기</li>\n</ol>\n<h2>gatsby-config.js 에 필요한 정보 설정하기</h2>\n<p>Gatsby 로 마크다운을 읽기 위해서는 <code>gatsby-source-filesystem</code> 플로그인과 마크다운을 필요한 정보로 해석하기 위한 <code>gatsby-transformer-remark</code> 이 필요하다.<br>\n해당 내용을 <code>gatsby-config.js</code> 에 세팅해야 한다.</p>\n<pre><code class=\"language-javascript\">// gatsby-config.js\nplugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `markdown-pages`,\n        path: `${__dirname}/src/파일이 위치할 폴더이름`,\n      },\n    },\n    `gatsby-transformer-remark`,\n]\n</code></pre>\n<h2>마크다운을 Html로 변경하기 위한 템플릿 만들기</h2>\n<p>Gatsby는 graphql를 이용해서 Markdown 데이터 정보를 가져온다.\n가져온 정보는 Template 에게 주어지며, 정의한 곳에 세팅된다.</p>\n<pre><code class=\"language-javascript\">// markdown-template.js\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport default function Template({data}) {\n  const { markdownRemark: { frontmatter, html } } = data;\n  return (\n    &#x3C;div>\n        &#x3C;h1>{frontmatter.title}&#x3C;/h1>\n        &#x3C;h2>{frontmatter.date}&#x3C;/h2>\n        &#x3C;div\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n    &#x3C;/div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"YYYY년 MM월 DD일 \")\n        path\n        title\n      }\n    }\n  }\n`\n</code></pre>\n<h2>템플릿을 정적 HTML로 만들기</h2>\n<p>Gatsby는 Node.js API 으로 정적페이지를 만들어 낸다.<br>\n이를 사용하기 위해서는 gatsby-node.js 에 세팅해야 한다.</p>\n<p>읽어온 markdown 정보를 createPage 으로 실제 정적 파일로 만들어낸다.</p>\n<pre><code class=\"language-javascript\">// gatsby-node.js\nconst path = require(\"path\")\n\nexports.createPages = ({ actions, graphql }) => {\n  const { createPage } = actions\n\n  const blogPostTemplate = path.resolve(`템플릿 파일`)\n\n  return graphql(`\n    {\n      allMarkdownRemark(\n        sort: { order: DESC, fields: [frontmatter___date] }\n        limit: 1000\n      ) {\n        edges {\n          node {\n            frontmatter {\n              path\n            }\n          }\n        }\n      }\n    }\n  `).then(result => {\n    if (result.errors) {\n      return Promise.reject(result.errors)\n    }\n\n    result.data.allMarkdownRemark.edges.forEach(({ node }) => {\n      createPage({\n        path: node.frontmatter.path,\n        component: blogPostTemplate,\n        context: {}, // additional data can be passed via context\n      })\n    })\n  })\n}\n</code></pre>\n<h2>첫 포스트 작성해보기</h2>\n</end>\n<p><a href=\"https://www.gatsbyjs.org/docs/adding-markdown-pages/\">Gatsby 공식 마크다운 적용방법</a></p>","frontmatter":{"date":"2019년 02월 02일 ","path":"/posts/make-blog-gatsby-markdown","title":"Gatsby 로 Markdown 블로그 만들기"}}},"pageContext":{}}